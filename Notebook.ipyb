{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2965537,"sourceType":"datasetVersion","datasetId":1818188}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:22.473585Z","iopub.execute_input":"2025-04-24T06:37:22.473998Z","iopub.status.idle":"2025-04-24T06:37:23.936227Z","shell.execute_reply.started":"2025-04-24T06:37:22.473967Z","shell.execute_reply":"2025-04-24T06:37:23.935277Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic-dataset/Titanic-Dataset.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/titanic-dataset/Titanic-Dataset.csv')\nprint('shape:',df.shape)\nprint('columns:',df.columns)\ncolumns=df.columns\nfor _ in columns:\n    print(_,':',df[_].dtype)\nprint(df.isna().sum())\ndf.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:23.937774Z","iopub.execute_input":"2025-04-24T06:37:23.938254Z","iopub.status.idle":"2025-04-24T06:37:24.023956Z","shell.execute_reply.started":"2025-04-24T06:37:23.938226Z","shell.execute_reply":"2025-04-24T06:37:24.022904Z"}},"outputs":[{"name":"stdout","text":"shape: (891, 12)\ncolumns: Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n      dtype='object')\nPassengerId : int64\nSurvived : int64\nPclass : int64\nName : object\nSex : object\nAge : float64\nSibSp : int64\nParch : int64\nTicket : object\nFare : float64\nCabin : object\nEmbarked : object\nPassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"#null value is in age and cabin and embarked\n#for handling null in age(int64) we will use median\n#for handling null in object we will use NaN","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:24.024943Z","iopub.execute_input":"2025-04-24T06:37:24.025235Z","iopub.status.idle":"2025-04-24T06:37:24.029684Z","shell.execute_reply.started":"2025-04-24T06:37:24.025207Z","shell.execute_reply":"2025-04-24T06:37:24.028876Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df['Age']=df['Age'].fillna(df['Age'].median())\ndf['Embarked']=df['Embarked'].fillna(df['Embarked'].mode()[0])\ndf['Cabin']=df['Cabin'].fillna('NaN')\ndf.head(4)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:24.032217Z","iopub.execute_input":"2025-04-24T06:37:24.032570Z","iopub.status.idle":"2025-04-24T06:37:24.067425Z","shell.execute_reply.started":"2025-04-24T06:37:24.032538Z","shell.execute_reply":"2025-04-24T06:37:24.066503Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"df[['Age','Cabin','Embarked']].head(4)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:24.068392Z","iopub.execute_input":"2025-04-24T06:37:24.068692Z","iopub.status.idle":"2025-04-24T06:37:24.085737Z","shell.execute_reply.started":"2025-04-24T06:37:24.068660Z","shell.execute_reply":"2025-04-24T06:37:24.084664Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"    Age Cabin Embarked\n0  22.0   NaN        S\n1  38.0   C85        C\n2  26.0   NaN        S\n3  35.0  C123        S","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>22.0</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>38.0</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>26.0</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>35.0</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\ndf = pd.get_dummies(df, columns=['Embarked'], drop_first=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:24.086771Z","iopub.execute_input":"2025-04-24T06:37:24.087105Z","iopub.status.idle":"2025-04-24T06:37:24.115078Z","shell.execute_reply.started":"2025-04-24T06:37:24.087083Z","shell.execute_reply":"2025-04-24T06:37:24.114004Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf[['Age', 'Fare']] = scaler.fit_transform(df[['Age', 'Fare']])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:24.116207Z","iopub.execute_input":"2025-04-24T06:37:24.116511Z","iopub.status.idle":"2025-04-24T06:37:24.316987Z","shell.execute_reply.started":"2025-04-24T06:37:24.116490Z","shell.execute_reply":"2025-04-24T06:37:24.316063Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"df.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:24.318093Z","iopub.execute_input":"2025-04-24T06:37:24.318433Z","iopub.status.idle":"2025-04-24T06:37:24.326398Z","shell.execute_reply.started":"2025-04-24T06:37:24.318394Z","shell.execute_reply":"2025-04-24T06:37:24.325518Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"\ncorr_matrix = df.corr()\n\n# Plot heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\nplt.title('Correlation Matrix')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-24T06:37:24.327347Z","iopub.execute_input":"2025-04-24T06:37:24.327852Z","iopub.status.idle":"2025-04-24T06:37:24.930944Z","shell.execute_reply.started":"2025-04-24T06:37:24.327822Z","shell.execute_reply":"2025-04-24T06:37:24.929903Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":"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
